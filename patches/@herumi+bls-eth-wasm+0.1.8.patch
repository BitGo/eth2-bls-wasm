diff --git a/node_modules/@herumi/bls-eth-wasm/bls.js b/node_modules/@herumi/bls-eth-wasm/bls.js
index 1f3ddf4..c4104ad 100644
--- a/node_modules/@herumi/bls-eth-wasm/bls.js
+++ b/node_modules/@herumi/bls-eth-wasm/bls.js
@@ -1,3 +1,5 @@
+import wasmCode from './bls_c.wasm';
+
 (generator => {
   if (typeof window === 'object') {
     const exports = {}
@@ -181,6 +183,10 @@
     exports.blsInit = (curveType = exports.ethMode ? exports.BLS12_381 : exports.BN254) => {
       const r = mod._blsInit(curveType, MCLBN_COMPILED_TIME_VAR)
       if (r) throw ('blsInit err ' + r)
+
+      //https://github.com/herumi/bls/blob/master/include/bls/bls.h#L106
+      const r2 = mod._blsSetETHmode(3);
+      if (r2) throw ('blsSetEthMode err ' + r2)
     }
     exports.getCurveOrder = _wrapGetStr(mod._blsGetCurveOrder)
     exports.getFieldOrder = _wrapGetStr(mod._blsGetFieldOrder)
@@ -646,35 +652,31 @@
     exports.curveType = curveType
     const name = 'bls_c'
     return new Promise(resolve => {
-      if (isNodeJs) {
+      const wasmBinary = Buffer.from(wasmCode, "binary");
+      try {
         const crypto = require('crypto')
         exports.getRandomValues = crypto.randomFillSync
-        const path = require('path')
         const js = require(`./${name}.js`)
         const Module = {
-          cryptoGetRandomValues : _cryptoGetRandomValues,
-          locateFile: baseName => { return path.join(__dirname, baseName) }
-        }
+          cryptoGetRandomValues: _cryptoGetRandomValues,
+          wasmBinary: wasmBinary,
+        };
         js(Module)
           .then(_mod => {
-            exports.mod = _mod
-            setup(exports, curveType)
-            resolve()
-          })
-      } else {
+            exports.mod = _mod;
+            setup(exports, exports.curveType);
+            resolve();
+          });
+      } catch (e) {
         const crypto = window.crypto || window.msCrypto
         exports.getRandomValues = x => crypto.getRandomValues(x)
-        fetch(`./${name}.wasm`) // eslint-disable-line
-          .then(response => response.arrayBuffer())
-          .then(buffer => new Uint8Array(buffer))
-          .then(() => {
-            exports.mod = Module() // eslint-disable-line
-            exports.mod.cryptoGetRandomValues = _cryptoGetRandomValues
-            exports.mod.onRuntimeInitialized = () => {
-              setup(exports, curveType)
-              resolve()
-            }
-          })
+        exports.mod = Module()
+        exports.mod.cryptoGetRandomValues = _cryptoGetRandomValues
+        exports.mod.wasmBinary = wasmBinary;
+        exports.mod.onRuntimeInitialized = () => {
+          setup(exports, exports.curveType)
+          resolve()
+        }
       }
     })
   }
